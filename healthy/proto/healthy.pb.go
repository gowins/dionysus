// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.21.8
// source: healthy.proto

package healthy

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type HealthyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request string `protobuf:"bytes,10001,opt,name=request,proto3" json:"request,omitempty"`
}

func (x *HealthyRequest) Reset() {
	*x = HealthyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_healthy_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthyRequest) ProtoMessage() {}

func (x *HealthyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_healthy_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthyRequest.ProtoReflect.Descriptor instead.
func (*HealthyRequest) Descriptor() ([]byte, []int) {
	return file_healthy_proto_rawDescGZIP(), []int{0}
}

func (x *HealthyRequest) GetRequest() string {
	if x != nil {
		return x.Request
	}
	return ""
}

type HealthyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response string `protobuf:"bytes,10002,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *HealthyResponse) Reset() {
	*x = HealthyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_healthy_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthyResponse) ProtoMessage() {}

func (x *HealthyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_healthy_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthyResponse.ProtoReflect.Descriptor instead.
func (*HealthyResponse) Descriptor() ([]byte, []int) {
	return file_healthy_proto_rawDescGZIP(), []int{1}
}

func (x *HealthyResponse) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

type HealthyStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status bool `protobuf:"varint,10006,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *HealthyStatus) Reset() {
	*x = HealthyStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_healthy_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthyStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthyStatus) ProtoMessage() {}

func (x *HealthyStatus) ProtoReflect() protoreflect.Message {
	mi := &file_healthy_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthyStatus.ProtoReflect.Descriptor instead.
func (*HealthyStatus) Descriptor() ([]byte, []int) {
	return file_healthy_proto_rawDescGZIP(), []int{2}
}

func (x *HealthyStatus) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

var File_healthy_proto protoreflect.FileDescriptor

var file_healthy_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x22, 0x2b, 0x0a, 0x0e, 0x48, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x07, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x91, 0x4e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x2e, 0x0a, 0x0f, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x92, 0x4e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x0a, 0x0d, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x17, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x96, 0x4e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32,
	0xbf, 0x03, 0x0a, 0x0d, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x45, 0x0a, 0x0e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x4c, 0x69, 0x76, 0x65, 0x6e,
	0x65, 0x73, 0x73, 0x12, 0x17, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x2e, 0x48, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x68,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x11, 0x48, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x4c, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x53, 0x65, 0x74, 0x12, 0x16, 0x2e,
	0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x18, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x2e,
	0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x46, 0x0a, 0x0f, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x61, 0x64, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x12, 0x17, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x2e, 0x48,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e,
	0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x12, 0x48, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x53, 0x65, 0x74, 0x12,
	0x16, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x18, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x79, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x0d, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x75, 0x70, 0x12, 0x17, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x2e, 0x48,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e,
	0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x10, 0x48, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x53, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x53, 0x65, 0x74, 0x12, 0x16, 0x2e,
	0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x18, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x2e,
	0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x42, 0x0c, 0x5a, 0x0a, 0x2e, 0x2f, 0x3b, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_healthy_proto_rawDescOnce sync.Once
	file_healthy_proto_rawDescData = file_healthy_proto_rawDesc
)

func file_healthy_proto_rawDescGZIP() []byte {
	file_healthy_proto_rawDescOnce.Do(func() {
		file_healthy_proto_rawDescData = protoimpl.X.CompressGZIP(file_healthy_proto_rawDescData)
	})
	return file_healthy_proto_rawDescData
}

var file_healthy_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_healthy_proto_goTypes = []interface{}{
	(*HealthyRequest)(nil),  // 0: healthy.HealthyRequest
	(*HealthyResponse)(nil), // 1: healthy.HealthyResponse
	(*HealthyStatus)(nil),   // 2: healthy.HealthyStatus
}
var file_healthy_proto_depIdxs = []int32{
	0, // 0: healthy.HealthService.HealthLiveness:input_type -> healthy.HealthyRequest
	2, // 1: healthy.HealthService.HealthLivenessSet:input_type -> healthy.HealthyStatus
	0, // 2: healthy.HealthService.HealthReadiness:input_type -> healthy.HealthyRequest
	2, // 3: healthy.HealthService.HealthReadinessSet:input_type -> healthy.HealthyStatus
	0, // 4: healthy.HealthService.HealthStartup:input_type -> healthy.HealthyRequest
	2, // 5: healthy.HealthService.HealthStartupSet:input_type -> healthy.HealthyStatus
	1, // 6: healthy.HealthService.HealthLiveness:output_type -> healthy.HealthyResponse
	1, // 7: healthy.HealthService.HealthLivenessSet:output_type -> healthy.HealthyResponse
	1, // 8: healthy.HealthService.HealthReadiness:output_type -> healthy.HealthyResponse
	1, // 9: healthy.HealthService.HealthReadinessSet:output_type -> healthy.HealthyResponse
	1, // 10: healthy.HealthService.HealthStartup:output_type -> healthy.HealthyResponse
	1, // 11: healthy.HealthService.HealthStartupSet:output_type -> healthy.HealthyResponse
	6, // [6:12] is the sub-list for method output_type
	0, // [0:6] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_healthy_proto_init() }
func file_healthy_proto_init() {
	if File_healthy_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_healthy_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_healthy_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_healthy_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthyStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_healthy_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_healthy_proto_goTypes,
		DependencyIndexes: file_healthy_proto_depIdxs,
		MessageInfos:      file_healthy_proto_msgTypes,
	}.Build()
	File_healthy_proto = out.File
	file_healthy_proto_rawDesc = nil
	file_healthy_proto_goTypes = nil
	file_healthy_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// HealthServiceClient is the client API for HealthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HealthServiceClient interface {
	HealthLiveness(ctx context.Context, in *HealthyRequest, opts ...grpc.CallOption) (*HealthyResponse, error)
	HealthLivenessSet(ctx context.Context, in *HealthyStatus, opts ...grpc.CallOption) (*HealthyResponse, error)
	HealthReadiness(ctx context.Context, in *HealthyRequest, opts ...grpc.CallOption) (*HealthyResponse, error)
	HealthReadinessSet(ctx context.Context, in *HealthyStatus, opts ...grpc.CallOption) (*HealthyResponse, error)
	HealthStartup(ctx context.Context, in *HealthyRequest, opts ...grpc.CallOption) (*HealthyResponse, error)
	HealthStartupSet(ctx context.Context, in *HealthyStatus, opts ...grpc.CallOption) (*HealthyResponse, error)
}

type healthServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHealthServiceClient(cc grpc.ClientConnInterface) HealthServiceClient {
	return &healthServiceClient{cc}
}

func (c *healthServiceClient) HealthLiveness(ctx context.Context, in *HealthyRequest, opts ...grpc.CallOption) (*HealthyResponse, error) {
	out := new(HealthyResponse)
	err := c.cc.Invoke(ctx, "/healthy.HealthService/HealthLiveness", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthServiceClient) HealthLivenessSet(ctx context.Context, in *HealthyStatus, opts ...grpc.CallOption) (*HealthyResponse, error) {
	out := new(HealthyResponse)
	err := c.cc.Invoke(ctx, "/healthy.HealthService/HealthLivenessSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthServiceClient) HealthReadiness(ctx context.Context, in *HealthyRequest, opts ...grpc.CallOption) (*HealthyResponse, error) {
	out := new(HealthyResponse)
	err := c.cc.Invoke(ctx, "/healthy.HealthService/HealthReadiness", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthServiceClient) HealthReadinessSet(ctx context.Context, in *HealthyStatus, opts ...grpc.CallOption) (*HealthyResponse, error) {
	out := new(HealthyResponse)
	err := c.cc.Invoke(ctx, "/healthy.HealthService/HealthReadinessSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthServiceClient) HealthStartup(ctx context.Context, in *HealthyRequest, opts ...grpc.CallOption) (*HealthyResponse, error) {
	out := new(HealthyResponse)
	err := c.cc.Invoke(ctx, "/healthy.HealthService/HealthStartup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthServiceClient) HealthStartupSet(ctx context.Context, in *HealthyStatus, opts ...grpc.CallOption) (*HealthyResponse, error) {
	out := new(HealthyResponse)
	err := c.cc.Invoke(ctx, "/healthy.HealthService/HealthStartupSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HealthServiceServer is the server API for HealthService service.
type HealthServiceServer interface {
	HealthLiveness(context.Context, *HealthyRequest) (*HealthyResponse, error)
	HealthLivenessSet(context.Context, *HealthyStatus) (*HealthyResponse, error)
	HealthReadiness(context.Context, *HealthyRequest) (*HealthyResponse, error)
	HealthReadinessSet(context.Context, *HealthyStatus) (*HealthyResponse, error)
	HealthStartup(context.Context, *HealthyRequest) (*HealthyResponse, error)
	HealthStartupSet(context.Context, *HealthyStatus) (*HealthyResponse, error)
}

// UnimplementedHealthServiceServer can be embedded to have forward compatible implementations.
type UnimplementedHealthServiceServer struct {
}

func (*UnimplementedHealthServiceServer) HealthLiveness(context.Context, *HealthyRequest) (*HealthyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthLiveness not implemented")
}
func (*UnimplementedHealthServiceServer) HealthLivenessSet(context.Context, *HealthyStatus) (*HealthyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthLivenessSet not implemented")
}
func (*UnimplementedHealthServiceServer) HealthReadiness(context.Context, *HealthyRequest) (*HealthyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthReadiness not implemented")
}
func (*UnimplementedHealthServiceServer) HealthReadinessSet(context.Context, *HealthyStatus) (*HealthyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthReadinessSet not implemented")
}
func (*UnimplementedHealthServiceServer) HealthStartup(context.Context, *HealthyRequest) (*HealthyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthStartup not implemented")
}
func (*UnimplementedHealthServiceServer) HealthStartupSet(context.Context, *HealthyStatus) (*HealthyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthStartupSet not implemented")
}

func RegisterHealthServiceServer(s *grpc.Server, srv HealthServiceServer) {
	s.RegisterService(&_HealthService_serviceDesc, srv)
}

func _HealthService_HealthLiveness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthServiceServer).HealthLiveness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/healthy.HealthService/HealthLiveness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthServiceServer).HealthLiveness(ctx, req.(*HealthyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthService_HealthLivenessSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthyStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthServiceServer).HealthLivenessSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/healthy.HealthService/HealthLivenessSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthServiceServer).HealthLivenessSet(ctx, req.(*HealthyStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthService_HealthReadiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthServiceServer).HealthReadiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/healthy.HealthService/HealthReadiness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthServiceServer).HealthReadiness(ctx, req.(*HealthyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthService_HealthReadinessSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthyStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthServiceServer).HealthReadinessSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/healthy.HealthService/HealthReadinessSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthServiceServer).HealthReadinessSet(ctx, req.(*HealthyStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthService_HealthStartup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthServiceServer).HealthStartup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/healthy.HealthService/HealthStartup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthServiceServer).HealthStartup(ctx, req.(*HealthyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthService_HealthStartupSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthyStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthServiceServer).HealthStartupSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/healthy.HealthService/HealthStartupSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthServiceServer).HealthStartupSet(ctx, req.(*HealthyStatus))
	}
	return interceptor(ctx, in, info, handler)
}

var _HealthService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "healthy.HealthService",
	HandlerType: (*HealthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthLiveness",
			Handler:    _HealthService_HealthLiveness_Handler,
		},
		{
			MethodName: "HealthLivenessSet",
			Handler:    _HealthService_HealthLivenessSet_Handler,
		},
		{
			MethodName: "HealthReadiness",
			Handler:    _HealthService_HealthReadiness_Handler,
		},
		{
			MethodName: "HealthReadinessSet",
			Handler:    _HealthService_HealthReadinessSet_Handler,
		},
		{
			MethodName: "HealthStartup",
			Handler:    _HealthService_HealthStartup_Handler,
		},
		{
			MethodName: "HealthStartupSet",
			Handler:    _HealthService_HealthStartupSet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "healthy.proto",
}
